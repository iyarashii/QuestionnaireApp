@page
@model QuestionnaireApp.Pages.Users.IndexModel
@{
    ViewData["Title"] = "Users";
    bool isAdmin;
}

<h1>Users</h1>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Users[0].LastName)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.FirstNameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                @Html.DisplayNameFor(model => model.Users[0].FirstName)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.EmailSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Users[0].Email)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserClaims)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Users)
        {
            if(Model.UserClaims.FirstOrDefault(m => m.UserId == item.Id) != null)
            {
                isAdmin = (Model.UserClaims.FirstOrDefault(m => m.UserId == item.Id).ClaimValue == bool.TrueString);
            }
            else
            {
                isAdmin = false;
            }
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @if (!(Model.UserClaims.FirstOrDefault(m => m.UserId == item.Id) != null))
                {
                    @: False
                }
                @Html.DisplayFor(modelItem => Model.UserClaims.FirstOrDefault(m => m.UserId == item.Id).ClaimValue)
            </td>
            <td>
                @if (!isAdmin)
                {
                <a asp-page="./GrantAdminRights" asp-route-id="@item.Id">Grant Admin rights</a>@: |
                }
                <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Users.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Users.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Users.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Users.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>

